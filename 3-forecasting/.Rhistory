cm <- makeCacheMatrix(m)
cm <- makeCacheMatrix(m)makeCacheMatrix <- function(matrixtocache = matrix()) {
# We want a function to cache the inverse of a matrix "x"
# The variable "inverse" contains the value of x
# When there's no matrix, "inverse" is "NULL".
inversedmatrix <- NULL
# We now create a set function to be able to set a specific matrix
# to the instance of this class of "matrix".
set <- function(newmatrix) {
matrixtocache <<- newmatrix
inversedmatrix <<- NULL
}
# We get the matrix in "get"
get <- function() matrixtocache
# We directly set the value of the matrix in "setinverse".
setinverse <- function(newmatrixinverse) inversedmatrix <<- newmatrixinverse
# We can get the value of the matrix using "getinverse".
getinverse <- function() inversedmatrix
# We now put the 4 functions in a list
list(	set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse
)
}
cacheSolve <- function(cachematrix) {
#this function uses the matrix from makeCacheMatrix to return its inverse.
#if the inverse has already been calculated and the matrix has not changed
#then the cacheSolve should retrieve the inverse from the cache
matrixinverse <- cachematrix$getinverse()
if(!is.null(matrixinverse)) {
message("getting cached data")
matrixinverse
}
Matrix <- cachematrix$get()
matrixinverse <- solve(Matrix)
cachematrix$setinverse(matrixinverse)
matrixinverse
}
makeCacheMatrix <- function(matrixtocache = matrix()) {
# We want a function to cache the inverse of a matrix "x"
# The variable "inverse" contains the value of x
# When there's no matrix, "inverse" is "NULL".
inversedmatrix <- NULL
# We now create a set function to be able to set a specific matrix
# to the instance of this class of "matrix".
set <- function(newmatrix) {
matrixtocache <<- newmatrix
inversedmatrix <<- NULL
}
# We get the matrix in "get"
get <- function() matrixtocache
# We directly set the value of the matrix in "setinverse".
setinverse <- function(newmatrixinverse) inversedmatrix <<- newmatrixinverse
# We can get the value of the matrix using "getinverse".
getinverse <- function() inversedmatrix
# We now put the 4 functions in a list
list(	set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse
)
}
cacheSolve <- function(cachematrix) {
#this function uses the matrix from makeCacheMatrix to return its inverse.
#if the inverse has already been calculated and the matrix has not changed
#then the cacheSolve should retrieve the inverse from the cache
matrixinverse <- cachematrix$getinverse()
if(!is.null(matrixinverse)) {
message("getting cached data")
matrixinverse
}
Matrix <- cachematrix$get()
matrixinverse <- solve(Matrix)
cachematrix$setinverse(matrixinverse)
matrixinverse
}
m <- matrix(c(4:7),2,2)
cacheSolve(m)
cacheSolve(cm)
makeCacheMatrix <- function(matrixtocache = matrix()) {
# We want a function to cache the inverse of a matrix "x"
# The variable "inverse" contains the value of x
# When there's no matrix, "inverse" is "NULL".
inversedmatrix <- NULL
# We now create a set function to be able to set a specific matrix
# to the instance of this class of "matrix".
set <- function(newmatrix) {
matrixtocache <<- newmatrix
inversedmatrix <<- NULL
}
# We get the matrix in "get"
get <- function() matrixtocache
# We directly set the value of the matrix in "setinverse".
setinverse <- function(newmatrixinverse) inversedmatrix <<- newmatrixinverse
# We can get the value of the matrix using "getinverse".
getinverse <- function() inversedmatrix
# We now put the 4 functions in a list
list(	set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse
)
}
rm(list=ls(all=TRUE))
m <- matrix(c(4:7),2,2)
makeCacheMatrix <- function(matrixtocache = matrix()) {
# We want a function to cache the inverse of a matrix "x"
# The variable "inverse" contains the value of x
# When there's no matrix, "inverse" is "NULL".
inversedmatrix <- NULL
# We now create a set function to be able to set a specific matrix
# to the instance of this class of "matrix".
set <- function(newmatrix) {
matrixtocache <<- newmatrix
inversedmatrix <<- NULL
}
# We get the matrix in "get"
get <- function() matrixtocache
# We directly set the value of the matrix in "setinverse".
setinverse <- function(newmatrixinverse) inversedmatrix <<- newmatrixinverse
# We can get the value of the matrix using "getinverse".
getinverse <- function() inversedmatrix
# We now put the 4 functions in a list
list(	set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse
)
}
cacheSolve <- function(cachematrix) {
#this function uses the matrix from makeCacheMatrix to return its inverse.
#if the inverse has already been calculated and the matrix has not changed
#then the cacheSolve should retrieve the inverse from the cache
matrixinverse <- cachematrix$getinverse()
if(!is.null(matrixinverse)) {
message("getting cached data")
matrixinverse
}
Matrix <- cachematrix$get()
matrixinverse <- solve(Matrix)
cachematrix$setinverse(matrixinverse)
matrixinverse
}
cm <- makeCacheMatrix(m)
cacheSolve(cm)
cacheSolve(cm)
cacheSolve(cm)
cacheSolve <- function(cachematrix) {
#this function uses the matrix from makeCacheMatrix to return its inverse.
#if the inverse has already been calculated and the matrix has not changed
#then the cacheSolve should retrieve the inverse from the cache
matrixinverse <- cachematrix$getinverse()
if(!is.null(matrixinverse)) {
message("getting cached data")
matrixinverse
}
Matrix <- cachematrix$get()
matrixinverse <- matrix()
cachematrix$setinverse(matrixinverse)
matrixinverse
}
cacheSolve(cm)
cacheSolve(cm)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setinverse<-function(inverse) m<<-inverse
getinverse<-function() m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## This function either solves the inverse of the matrix or returns
## result if already cached.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data<-x$get()
m<-solve(data,...)
x$setinverse(m)
return(m)
}
cacheSolve(cm)
cm <- makeCacheMatrix(m)
cacheSolve(cm)
cacheSolve(cm)
cacheSolve(cm)
rm(list=ls(all=TRUE))
#carico sia i vecchi che i nuovi dati
dataold=read.table('DATA_3.01_CREDIT.csv',sep=',',header=TRUE)
datanew=read.table('DATA_4.01_CREDIT2.csv',sep=',',header=TRUE)
summary(dataold)
summary(datanew)
#eseguo una regressione lineare sui dati di sample
linreg=lm(Rating~.,data=dataold)
summary(linreg)
summary(dataold)
?predict
predcreditscore = predict(linreg,newdata=datanew,type="response")
predcreditscore = predict(linreg,newdata=datanew,type="response")
summary(predictscore)
summary(predcredictscore)
summary(predcreditscore)
predcreditscore
predcreditscore2 = predict(linreg,newdata=dataold,type="response")
predcreditscore2
predCreditScore = predict(linreg,newdata=datanew,type="response")
predCreditScore
datanew$Rating
cor(linreg$fitted.values,dataold$Rating)
plot(dataold$Rating,linreg$fitted.values)
cor(predcreditscore,datanew$Rating)
plot(datanew$Rating,predcreditscore)
plot(dataold$Rating,linreg$fitted.values)
predCreditScore = predict(linreg,newdata=dataold,type="response")
cor(predcreditscore,datanew$Rating)
cor(linreg$fitted.values,dataold$Rating)
linreg=lm(Rating~.,data=datanew)
predCreditScore = predict(linreg,newdata=datanew,type="response")
cor(predcreditscore,datanew$Rating)
plot(datanew$Rating,predcreditscore)
rm(list=ls(all=TRUE))
dataold=read.table('DATA_3.02_HR2.csv', header = T,sep=',') # The function read.table enables us to read flat files such as .csv files
dataold=read.table('DATA_3.02_HR2.csv', header = T,sep=',')
dataold=read.table('DATA_3.02_HR2.csv', header = T,sep=',')
datanew=read.table('DATA_4.02_HR3.csv', header = T,sep=',')
str(datanew) # The str() function shows the structure of your dataset and details the type of variables that it contains
summary(datanew) # The summary() function provides for each variable in your dataset the minimum, mean, maximum and quartiles
#eseguo usa regressione lineare binomiale sui dati sample
#provo a predirre i dati di abbandono basati sul mio modello
probToLeave=predict(logreg,newdata=datanew,type="response")
logreg = glm(left ~ ., family=binomial(logit), data=dataold)
#provo a predirre i dati di abbandono basati sul mio modello
probToLeave=predict(logreg,newdata=datanew,type="response")
probToLeave
#metto in tabella i miei dati ipotizzati
predattrition = data.frame(probaToLeave)
predAttrition = data.frame(probToLeave)
View(predAttrition) # View the predattrition dataframe
predAttrition
predAttrition$performance=datanew$LPE
predAttrition
plot(predattrition$probaToLeave,predattrition$performance)
plot(predAttrition$probaToLeave,predAttrition$performance)
plot(predAttrition$probaToLeave,predAttrition$performance)
predAttrition
plot(predAttrition$probToLeave,predAttrition$performance)
#ora posso plottare per ragionarci
plot(predAttrition$probToLeave,predAttrition$performance)
predAttrition$priority=predAttrition$performance*predAttrition$probToLeave
predAttrition$priority=predAttrition$performance*predAttrition$probToLeave
View(predattrition)
#per dare priorità uso come parametro il prodotto tra la performance e la probabilità di andarsene
predAttrition$priority=predAttrition$performance*predAttrition$probToLeave
orderPredAttrition=predAttrition[order(predAttrition$priority,decreasing = TRUE),]
orderpredattrition
orderPredAttrition
head(orderPredAttrition,20)
rm(list=ls(all=TRUE))
data=read.table('DATA_4.03_MNT.csv',sep=',',header=TRUE)
str(data) # The str() function shows the structure of your dataset and details the type of variables that it contains
summary(data) # The summary() function provides for each variable in your dataset the minimum, mean, maximum and quartiles
linregmodel = lm(lifetime~.-broken,data=data)
summary(linregmodel)
summary(data)
install.packages("survival") # Install the survival package to your computer
install.packages("survival") # Install the survival package to your computer
library(survival) # Load the survival package
linregmodel = lm(lifetime~.-broken,data=data)
summary(linregmodel)
linregmodel = lm(lifetime~.,data=data)
summary(linregmodel)
linregmodel = lm(lifetime~.-broken,data=data)
summary(linregmodel)
data
summary(lm(lifetime~.,data=data))
datanb=data[data$broken==1]
datanb=data[data$broken==1,]
datanb
summary(datanb)
linregmodel = lm(lifetime~.,data=ddatanb)
linregmodel = lm(lifetime~.,data=datanb)
summary(linregmodel)
summary(lm(lifetime~.-broken,data=datanb))
linregmodel = lm(lifetime~.-broken,data=data)
#sembra che il teamC e soprattutto il provider3 siano coloro che fanno rompere più pezzi
#ma non è affidabile in quanto quelli non rotti hanno un lifetime non predefinito
summary(linregmodel)
library(survival)
dependantvars = Surv(data$lifetime, data$broken)
summary(survreg)
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=data)
summary(survreg)
rm(list=ls(all=TRUE))
data=read.table('DATA_4.03_MNT.csv',sep=',',header=TRUE)
summary(data)
#calcolo il modello lineare su tutte le variabili, tranne broken
linregmodel = lm(lifetime~.-broken,data=data)
#sembra che il teamC e soprattutto il provider3 siano coloro che fanno rompere più pezzi
#ma non è affidabile in quanto quelli non rotti hanno un lifetime non predefinito
summary(linregmodel)
library(survival)
#definisco quali sono le variabili indipendenti, in questo caso è doppia
dependantvars = Surv(data$lifetime, data$broken)
#calcolo la mia regressione per dati survivar, tra le variabili indipendenti e quelli dipendenti che specifico una d una
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=data)
summary(survreg)
View(data)
Ebreak=predict(survreg, newdata=data, type="quantile", p=.5)
Forecast=data.frame(Ebreak)
Forecast
Forecast=data.frame(Ebreak)
Forecast$lifetime=data$lifetime
Forecast$broken=data$broken
Forecast$RemainingLT=Forecast$Ebreak-data$lifetime
Forecast
View(Forecast)
Forecast=Forecast[order(Forecast$RemainingLT),]
ActionsPriority=Forecast[Forecast$broken==0,] # And keep only those who are not broken yet
ActionsPriority=Forecast[Forecast$broken==0,]
ActionsPriority
View(ActionsPriority)
summary(survreg)
?lm
rm(list=ls())
data=read.table('DATA_4.04_CHOC.csv',sep=',',header=TRUE) # The function read.table enables us to read flat files such as .csv files
data=read.table('DATA_4.04_CHOC.csv',sep=',',header=TRUE)
summary(data$sales) # The summary() function provides for each variable in your dataset the minimum, mean, maximum and quartiles
summary(data)
plot(data$time,data$sales,main="Chocolate sales over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$sales*1.2)),type='l')
View(data)
regres=lm(sales~month,data=data)
summary(regres)
plot(data$month,data$sales,main="Chocolate sales by month",xlab="Month",ylab="Monthly sales",ylim=c(0,max(data$sales*1.2)))
plot(data$month,data$sales)
plot(data$month,data$sales,main="Chocolate sales by month",xlab="Month",ylab="Monthly sales",ylim=c(0,max(data$sales*1.2)))
plot(data$time,data$sales,main="Chocolate sales over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$sales)*1.2),type='l')
lines(data$time,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual sales","Sales by the model"),lty=c(1,2),col=c('black','blue'))
legend("topleft",c("Actual sales","Sales by the model"),lty=c(1,2),col=c('black','blue'))
plot(data$time,regres$fitted.values,main="Chocolate sales over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$sales)*1.2),type='l')
lines(data$time,regres$fitted.values,type='l',col='blue',lty=2)
plot(data$time,data$sales,main="Chocolate sales over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$sales)*1.2),type='l')
lines(data$time,regres$fitted.values,type='l',col='blue',lty=2)
legend("topleft",c("Actual sales","Sales by the model"),lty=c(1,2),col=c('black','blue'))
regres=lm(sales~.,data=data)
summary(regres)
#plotto le vendite per mese, mi esce un diagramma a box, questo perchè il mese è fattorizzato
#vedo bene la distribuzione nelle vendite. A dicembre ho vendite alte ma anche molta variabilità
plot(data$month,data$sales,main="Chocolate sales by month",xlab="Month",ylab="Monthly sales",ylim=c(0,max(data$sales*1.2)))
summary(regres)
#plotto le vendite per mese, mi esce un diagramma a box, questo perchè il mese è fattorizzato
#vedo bene la distribuzione nelle vendite. A dicembre ho vendite alte ma anche molta variabilità
plot(data$month,data$sales,main="Chocolate sales by month",xlab="Month",ylab="Monthly sales",ylim=c(0,max(data$sales*1.2)))
#riplotto come prima ma sovrappongo i dati del mio modello (che si ripete sempre nel tempo perchè considera solo il mese)
plot(data$time,data$sales,main="Chocolate sales over time",xlab="Time (in month)",ylab="Monthly sales",ylim=c(0,max(data$sales)*1.2),type='l')
lines(data$time,regres$fitted.values,type='l',col='blue',lty=2)
rm(list=ls(all=TRUE))
dataold=read.table('DATA_3.02_HR2.csv', header = T,sep=',')
#eseguo usa regressione lineare binomiale sui dati sample
datanew=read.table('DATA_4.02_HR3.csv', header = T,sep=',')
logreg = glm(left ~ ., family=binomial(logit), data=dataold)
probToLeave=predict(logreg,newdata=datanew,type="response")
#provo a predirre i dati di abbandono basati sul mio modello
#metto in tabella i miei dati ipotizzati per migliore leggibilità
#e ci metto affianco il Last Project Evaluation
predAttrition = data.frame(probToLeave)
predAttrition$performance=datanew$LPE
#ora posso plottare per ragionarci, devo lavorare sulle persone nel quadrante alto a destra
plot(predAttrition$probToLeave,predAttrition$performance)
#per dare priorità uso come parametro il prodotto tra la performance e la probabilità di andarsene
predAttrition$priority=predAttrition$performance*predAttrition$probToLeave
orderPredAttrition=predAttrition[order(predAttrition$priority,decreasing = TRUE),]
head(orderPredAttrition,20)
View(orderPredAttrition)
View(datanew)
View(dataold)
View(orderPredAttrition)
View(predAttrition)
View(predAttrition)
View(datanew)
View(predAttrition)
ccc <- predAttrition[predAttrition$performance>0.9]
ccc <- predAttrition[predAttrition$performance>0.9,]
View(ccc)
rm(list=ls(all=TRUE))
data=read.table('DATA_4.03_MNT.csv',sep=',',header=TRUE)
summary(data)
#calcolo il modello lineare su tutte le variabili, tranne broken
linregmodel = lm(lifetime~.-broken,data=data)
#sembra che il teamC e soprattutto il provider3 siano coloro che fanno rompere più pezzi
#ma non è affidabile in quanto quelli non rotti hanno un lifetime non predefinito
library(survival)
#definisco quali sono le variabili indipendenti, in questo caso è doppia
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=data)
summary(survreg)
#Ora provo a fare delle previsioni future, in particolare su quando si romperanno, basate sul mio modello
Ebreak=predict(survreg, newdata=data, type="quantile", p=.5)
Forecast=data.frame(Ebreak)
Forecast$lifetime=data$lifetime
Forecast$broken=data$broken
Forecast$RemainingLT=Forecast$Ebreak-data$lifetime
Forecast=Forecast[order(Forecast$RemainingLT),]
ActionsPriority=Forecast[Forecast$broken==0,]
summary(linregmodel)
#tabellizzo e calcolo i giorni previsti di vita rimanente (per i non rotti, per gli altri da l'errore di previsione)
#calcolo la mia regressione per dati survivar, tra le variabili indipendenti e quelli dipendenti che specifico una d una
dependantvars = Surv(data$lifetime, data$broken)
#calcolo dove agire prima
summary(survreg)
rm(list=ls(all=TRUE))
data=read.table('DATA_4.03_MNT.csv',sep=',',header=TRUE)
summary(data)
#calcolo il modello lineare su tutte le variabili, tranne broken
linregmodel = lm(lifetime~.-broken,data=data)
#sembra che il teamC e soprattutto il provider3 siano coloro che fanno rompere più pezzi
#ma non è affidabile in quanto quelli non rotti hanno un lifetime non predefinito
summary(linregmodel)
library(survival)
#definisco quali sono le variabili indipendenti, in questo caso è doppia
dependantvars = Surv(data$lifetime, data$broken)
#calcolo la mia regressione per dati survivar, tra le variabili indipendenti e quelli dipendenti che specifico una d una
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=data)
summary(survreg)
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd, dist="gaussian",data=data)
summary(survreg)
linregmodel = lm(lifetime~.pressureInd+moistureInd+temperatureInd,data=data)
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd, dist="gaussian",data=data)
summary(survreg)
linregmodel = lm(lifetime~.pressureInd+moistureInd+temperatureInd,data=data)
linregmodel = lm(lifetime~.pressure+moisture+temperature,data=data)
View(data)
linregmodel = lm(lifetime~.pressureInd+moistureInd+temperatureInd,data=data)
linregmodel = lm(lifetime~pressureInd+moistureInd+temperatureInd,data=data)
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd, dist="gaussian",data=data)
summary(survreg)
rm(list=ls(all=TRUE))
data=read.table('DATA_4.03_MNT.csv',sep=',',header=TRUE)
summary(data)
#calcolo il modello lineare su tutte le variabili, tranne broken
linregmodel = lm(lifetime~.-broken,data=data)
#siano coloro che fanno rompere più pezzi ma non è affidabile in quanto quelli non rotti hanno un lifetime non predefinito
summary(linregmodel)
library(survival)
dependantvars = Surv(data$lifetime, data$broken)
#calcolo la mia regressione per dati survivar, tra le variabili indipendenti e quelli dipendenti che specifico una d una
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=data)
summary(survreg)
Ebreak=predict(survreg, newdata=data, type="quantile", p=.5)
#tabellizzo e calcolo i giorni previsti di vita rimanente (per i non rotti, per gli altri da l'errore di previsione)
Forecast=data.frame(Ebreak)
Forecast$lifetime=data$lifetime
#calcolo dove agire prima
Forecast=Forecast[order(Forecast$RemainingLT),]
ActionsPriority=Forecast[Forecast$broken==0,]
#sembra che il teamC e soprattutto il provider3 (che è anche quello significativo)
#definisco quali sono le variabili indipendenti, in questo caso è doppia
Forecast$broken=data$broken
Forecast$RemainingLT=Forecast$Ebreak-data$lifetime
#Ora provo a fare delle previsioni future, in particolare su quando si romperanno, basate sul mio modello
View(ActionsPriority)
rm(list=ls(all=TRUE))
data=read.table('DATA_4.03_MNT.csv',sep=',',header=TRUE)
summary(data)
#calcolo il modello lineare su tutte le variabili, tranne broken
linregmodel = lm(lifetime~.-broken,data=data)
#sembra che il teamC e soprattutto il provider3 (che è anche quello significativo)
summary(linregmodel)
#siano coloro che fanno rompere più pezzi ma non è affidabile in quanto quelli non rotti hanno un lifetime non predefinito
library(survival)
#definisco quali sono le variabili indipendenti, in questo caso è doppia
dependantvars = Surv(data$lifetime, data$broken)
#calcolo la mia regressione per dati survivar, tra le variabili indipendenti e quelli dipendenti che specifico una d una
survreg = survreg(dependantvars~pressureInd+moistureInd+temperatureInd+team+provider, dist="gaussian",data=data)
summary(survreg)
#Ora provo a fare delle previsioni future, in particolare su quando si romperanno, basate sul mio modello
Ebreak=predict(survreg, newdata=data, type="quantile", p=.5)
#tabellizzo e calcolo i giorni previsti di vita rimanente (per i non rotti, per gli altri da l'errore di previsione)
Forecast=data.frame(Ebreak)
Forecast$lifetime=data$lifetime
Forecast$broken=data$broken
Forecast$RemainingLT=Forecast$Ebreak-data$lifetime
View(Forecast)
rm(list=ls(all=TRUE))
#income in kdollari, rating (score, la variabile indipendente da predirre), numero cc, età, #anni di studio, gender, studente?, sposato?, etnia, debito medio sulla carta
data=read.table('DATA_3.01_CREDIT.csv',sep=',',header=TRUE)
#View(data)
summary(data)
#creo un istogramma per vedere come sono distribuiti i vari dati
hist(data$Rating)
hist(data$Balance)
hist(data$Income)
tapply(data$Income,data$Ethnicity,mean) #gli africani guadagnano di più
#qui cerco la correlazione tra tutti i dati numerici nella tabella, escludo quindi quelli anagrafici discreti
##trovo delle relazioni tra le varie colonne, ma non mi serve molto (non ho capito bene come mai, in effetti la correlazione tra rating e income/balancing è alta come poi capirò alla fine)
# la corr mi da indicazioni solo sulla forza e la direzione della correlazione
#creo un modello di regressione lineare tra la mia variabile cercata (Rating) e tutte le altre (.=*, se volevo indagarne una sola la specificavo, se più di una le unico con +)
cor(data[,c(1:5,10)])
linreg=lm(Rating~.,data=data)
summary(linreg)
cor(data[,c(1:5,10)])
cor(data[,c(1:5,10)])
cor(linreg$fitted.values,data$Rating)
summary(linreg)
cor(data[,c(1:5,10)])
